#ifndef _DSI_IRIS3_H_
#define _DSI_IRIS3_H_

#include "dsi_iris3_def.h"


#define DBC_INCOME_BL_SIZE (256*4)

#define DBC_COMPK_BLOCK_SIZE (128*4)
#define DBC_COMPK_BLOCK_NUM (2)


#define DBC_CABC_DLV_SIZE (64*4)

#define DBC_LEVEL_CNT 4
#define AB_TABLE 2

#define DBC_LUT_SIZE1 (DBC_LEVEL_CNT*(DBC_COMPK_BLOCK_SIZE*DBC_COMPK_BLOCK_NUM + DBC_CABC_DLV_SIZE))
#define DBC_LUT_SIZE (DBC_INCOME_BL_SIZE + DBC_LUT_SIZE1)


#define CM_FW_START_ADDR (DBC_LUT_SIZE)
#define CM_LUT_BLOCK_SIZE (729*4)
#define CM_LUT_BLOCK_NUMBER 8
#define CM_LUT_SIZE (CM_LUT_BLOCK_SIZE*8) // eight block
#define CM_LUT_NUMBER 21
#define CM_LUT_GROUP 3 // table 0,3,6 should store at the same address in iris


#define SDR2HDR_FW_START_ADDR (CM_FW_START_ADDR + CM_LUT_SIZE*CM_LUT_NUMBER)
#define SDR2HDR_LUT_BLOCK_SIZE (128*4)
#define SDR2HDR_LUT_BLOCK_NUMBER (4*6+3*4)
#define SDR2HDR_LUT2_BLOCK_NUMBER (6)
#define SDR2HDR_LUTUVY_BLOCK_NUMBER (12)

#define SDR2HDR_INV_UV_SIZE (128*4*2)
#define SDR2HDR_INV_UV_NUMBER 1


#define SDR2HDR_LUT_GROUP_CNT 6 // 0: HDR10In_Ycbcr; 1: HDR10In_Ictcp;2:IctcpIn_Ycbcr; 3: 709->709; 4: 709->p3;  5: 709->2020;

#define SDR2HDR_GROUP_SIZE (SDR2HDR_LUT_BLOCK_SIZE*SDR2HDR_LUT_BLOCK_NUMBER + SDR2HDR_INV_UV_SIZE *SDR2HDR_INV_UV_NUMBER)


#define SCALER1D_FW_START_ADDR (SDR2HDR_FW_START_ADDR + SDR2HDR_GROUP_SIZE*SDR2HDR_LUT_GROUP_CNT)

#define SCALER1D_LUT_SIZE (33*3*4)
#define SCALER1D_LUT_BLOCK_SIZE (33*4) // scaler1d lut format is special
#define SCALER1D_LUT_NUMBER 9
#define SCALER_LUT_BLOCK_NUMBER (3*2)

#define GAMMA_FW_START_ADDR (SCALER1D_FW_START_ADDR+SCALER1D_LUT_SIZE*SCALER1D_LUT_NUMBER)

#define GAMMA_LUT_SIZE (33*3*4)
#define GAMMA_LUT_NUMBER 8

#define PANEL_NITS_FW_START_ADDR  (GAMMA_FW_START_ADDR + GAMMA_LUT_SIZE * GAMMA_LUT_NUMBER)
#define PANEL_NITS_SIZE (2)

#define IRIS_FW_SIZE (GAMMA_FW_START_ADDR + GAMMA_LUT_SIZE * GAMMA_LUT_NUMBER +  PANEL_NITS_SIZE)

//move begin: the following define from lut.c to here

#define DIRECT_BUS_HEADER_SIZE 8



#define CM_LUT_BASE_PI_ADDR  0xF0568000;
#define CM_LUT_ADDRESS 0x8000
#define CM_LUT_BLOCK_ADDRESS_INC 0x3000
#define SDR2HDR_LUT_ADDRESS 0x0
#define SDR2HDR_LUT_BLOCK_ADDRESS_INC 0x400
#define SDR2HDR_INV_UV_ADDRESS 0xF15A1400

#define SDR2HDR_LUT2_ADDRESS 0x3000
#define SDR2HDR_LUTUVY_ADDRESS 0x6000

#define SCALER1D_LUT_ADDRESS 0x0

#define SCALER1D_H_Y_LOW 0x0
#define SCALER1D_H_Y_HIGH 0x400
#define SCALER1D_H_UV_LOW 0x100
#define SCALER1D_H_UV_HIGH 0x500

#define SCALER1D_V_Y 0x200
#define SCALER1D_V_UV 0x300

// for gamma

#define GAMMA_REG_ADDRESS 0xF0580040
#define GAMMA_LUT_LENGTH (198)

//for ambient light lut
#define SDR2HDR_LUT2_BLOCK_CNT (6)  // for SDR2HDR

/*for maxcll lut*/
#define SDR2HDR_LUTUVY_BLOCK_CNT (12)

#define LUT_LEN 256


#ifdef PXLW_IRIS3_FPGA
#define LUT_CMD_WAIT_MS 0
#else
#define LUT_CMD_WAIT_MS 0
#endif


//move end:

enum DBC_LUT_ADDR{
	INCOME_BL_A=0x1800,
	INCOME_BL_B=0x1C00,
	COMPK_DLV_A_0=0x800,
	COMPK_DLV_A_1=0xC00,
	COMPK_DLV_B_0=0x1000,
	COMPK_DLV_B_1=0x1400,
	CABC_DLV_0=0xF1540304,
};

enum DBC_LEVEL{
	DBC_INIT = 0,
	DBC_OFF,
	DBC_LOW,
	DBC_MIDDLE,
	DBC_HIGH,
};


enum LUT_TYPE{
	DBC_LUT=1,
	CM_LUT,
	SDR2HDR_LUT,
	SCALER1D_LUT,
	AMBINET_HDR_GAIN, //HDR case;
	AMBINET_SDR2HDR_LUT, //SDR2HDR case;
	GAMMA_LUT,
};
enum result {
	IRIS_FAILED = -1,
	IRIS_SUCCESS = 0,
};

enum PANEL_TYPE{
	PANEL_LCD_SRGB = 0,
	PANEL_LCD_P3,
	PANEL_OLED,
};

struct ocp_header{
	u32 header;
	u32 address;
};

#endif // _DSI_IRIS3_H_
